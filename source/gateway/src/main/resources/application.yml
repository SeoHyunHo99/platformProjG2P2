global:
  package_name: bookGenerator
  service_name: gateway

  open_port: 8088
  host_port: 8088

is_dubug_mode: true

server:
  port: ${global.open_port}

spring:
  application:
    name: ${global.service_name}

  config:
    use-legacy-processing: true

  main.allow-bean-definition-overriding: true

  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "*"
            allowedMethods:
              - "*"
            allowedHeaders:
              - "*"


      routes:
        - id: userWithAuth
          uri: http://${service.user.domain}:${service.user.port}
          predicates:
            - Path=/api/${service.user.name}/sanityCheck/authenticationCheck,/api/${service.user.name}/users/updateName
          filters:
            - RewritePath=/api/${service.user.name}/(?<segment>.*), /${segment}
            - AuthorizationHeaderFilter

        - id: userNoAuth
          uri: http://${service.user.domain}:${service.user.port}
          predicates:
            - Path=/api/${service.user.name}/**
          filters:
            - RewritePath=/api/${service.user.name}/(?<segment>.*), /${segment}


        - id: bookNoAuth
          uri: http://${service.book.domain}:${service.book.port}
          predicates:
            - Path=/api/${service.book.name}/sanityCheck,/api/${service.book.name}/sanityCheck/logs
          filters:
            - RewritePath=/api/${service.book.name}/(?<segment>.*), /${segment}

        - id: bookWithAuth
          uri: http://${service.book.domain}:${service.book.port}
          predicates:
            - Path=/api/${service.book.name}/**
          filters:
            - RewritePath=/api/${service.book.name}/(?<segment>.*), /${segment}
            - AuthorizationHeaderFilter


        - id: frontend
          uri: http://${service.frontend.domain}:${service.frontend.port}
          predicates:
            - Path=/**


logging:
  level:
    root: WARN
    bookGenerator.gateway.custom: DEBUG

# JWT 설정 및 인증을 위한 Public 키 경로
jwt:
  issuer: ${global.package_name}.io
  expire-after-seconds: 36000
  public.key: classpath:rsa.public.key

service:
  user:
    name: user
  
  book:
    name: book

---

spring:
  profiles: host

service:
  user:
    domain: localhost
    port: 8082
  
  book:
    domain: localhost
    port: 8083

  frontend:
    domain: localhost
    port: 3000

---

spring:
  profiles: docker

service:
  user:
    domain: host.docker.internal
    port: 8082
  
  book:
    domain: host.docker.internal
    port: 8083

  frontend:
    domain: host.docker.internal
    port: 3000

---

spring:
  profiles: kubernates

service:
  user:
    domain: user
    port: 8080
  
  book:
    domain: book
    port: 8080

  frontend:
    domain: frontend
    port: 8080