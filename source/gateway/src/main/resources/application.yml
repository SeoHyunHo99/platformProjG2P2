global:
  package_name: bookGenerator
  service_name: gateway

  open_port: 8088
  host_port: 8088


server:
  port: ${global.open_port}

spring:
  application:
    name: ${global.service_name}

  config:
    use-legacy-processing: true

  main.allow-bean-definition-overriding: true

  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins:
              - "*"
            allowedMethods:
              - "*"
            allowedHeaders:
              - "*"


      routes:
        - id: userWithAuth
          uri: http://${service.user_domain}:${service.user_port}
          predicates:
            - Path=/api/user/sanityCheck/authenticationCheck,/api/user/users/updateName
          filters:
            - RewritePath=/api/user/(?<segment>.*), /${segment}
            - AuthorizationHeaderFilter

        - id: userNoAuth
          uri: http://${service.user_domain}:${service.user_port}
          predicates:
            - Path=/api/user/**
          filters:
            - RewritePath=/api/user/(?<segment>.*), /${segment}


        - id: frontend
          uri: http://${service.frontend_domain}:${service.frontend_port}
          predicates:
            - Path=/**


logging:
  level:
    root: WARN
    bookGenerator.gateway.custom: DEBUG

# JWT 설정 및 인증을 위한 Public 키 경로
jwt:
  issuer: ${global.package_name}.io
  expire-after-seconds: 36000
  public.key: classpath:rsa.public.key

---

spring:
  profiles: host

service:
  user_domain: localhost
  user_port: 8082

  frontend_domain: localhost
  frontend_port: 3000

---

spring:
  profiles: docker

service:
  user_domain: host.docker.internal
  user_port: 8082

  frontend_domain: host.docker.internal
  frontend_port: 3000

---

spring:
  profiles: kubernates

service:
  user_domain: user
  user_port: 8080

  frontend_domain: frontend
  frontend_port: 3000